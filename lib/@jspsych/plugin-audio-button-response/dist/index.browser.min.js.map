{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"audio-button-response\",\n  parameters: {\n    /** The audio to be played. */\n    stimulus: {\n      type: ParameterType.AUDIO,\n      pretty_name: \"Stimulus\",\n      default: undefined,\n    },\n    /** Array containing the label(s) for the button(s). */\n    choices: {\n      type: ParameterType.STRING,\n      pretty_name: \"Choices\",\n      default: undefined,\n      array: true,\n    },\n    /** The HTML for creating button. Can create own style. Use the \"%choice%\" string to indicate where the label from the choices parameter should be inserted. */\n    button_html: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Button HTML\",\n      default: '<button class=\"jspsych-btn\">%choice%</button>',\n      array: true,\n    },\n    /** Any content here will be displayed below the stimulus. */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Prompt\",\n      default: null,\n    },\n    /** The maximum duration to wait for a response. */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /** Vertical margin of button. */\n    margin_vertical: {\n      type: ParameterType.STRING,\n      pretty_name: \"Margin vertical\",\n      default: \"0px\",\n    },\n    /** Horizontal margin of button. */\n    margin_horizontal: {\n      type: ParameterType.STRING,\n      pretty_name: \"Margin horizontal\",\n      default: \"8px\",\n    },\n    /** If true, the trial will end when user makes a response. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n    /** If true, then the trial will end as soon as the audio file finishes playing. */\n    trial_ends_after_audio: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Trial ends after audio\",\n      default: false,\n    },\n    /**\n     * If true, then responses are allowed while the audio is playing.\n     * If false, then the audio must finish playing before a response is accepted.\n     */\n    response_allowed_while_playing: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response allowed while playing\",\n      default: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **audio-button-response**\n *\n * jsPsych plugin for playing an audio file and getting a button response\n *\n * @author Kristin Diep\n * @see {@link https://www.jspsych.org/plugins/jspsych-audio-button-response/ audio-button-response plugin documentation on jspsych.org}\n */\nclass AudioButtonResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n  private audio;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>, on_load: () => void) {\n    // hold the .resolve() function from the Promise that ends the trial\n    let trial_complete;\n\n    // setup stimulus\n    var context = this.jsPsych.pluginAPI.audioContext();\n\n    // store response\n    var response = {\n      rt: null,\n      button: null,\n    };\n\n    // record webaudio context start time\n    var startTime;\n\n    // load audio file\n    this.jsPsych.pluginAPI\n      .getAudioBuffer(trial.stimulus)\n      .then((buffer) => {\n        if (context !== null) {\n          this.audio = context.createBufferSource();\n          this.audio.buffer = buffer;\n          this.audio.connect(context.destination);\n        } else {\n          this.audio = buffer;\n          this.audio.currentTime = 0;\n        }\n        setupTrial();\n      })\n      .catch((err) => {\n        console.error(\n          `Failed to load audio file \"${trial.stimulus}\". Try checking the file path. We recommend using the preload plugin to load audio files.`\n        );\n        console.error(err);\n      });\n\n    const setupTrial = () => {\n      // set up end event if trial needs it\n      if (trial.trial_ends_after_audio) {\n        this.audio.addEventListener(\"ended\", end_trial);\n      }\n\n      // enable buttons after audio ends if necessary\n      if (!trial.response_allowed_while_playing && !trial.trial_ends_after_audio) {\n        this.audio.addEventListener(\"ended\", enable_buttons);\n      }\n\n      //display buttons\n      var buttons = [];\n      if (Array.isArray(trial.button_html)) {\n        if (trial.button_html.length == trial.choices.length) {\n          buttons = trial.button_html;\n        } else {\n          console.error(\n            \"Error in audio-button-response plugin. The length of the button_html array does not equal the length of the choices array\"\n          );\n        }\n      } else {\n        for (var i = 0; i < trial.choices.length; i++) {\n          buttons.push(trial.button_html);\n        }\n      }\n\n      var html = '<div id=\"jspsych-audio-button-response-btngroup\">';\n      for (var i = 0; i < trial.choices.length; i++) {\n        var str = buttons[i].replace(/%choice%/g, trial.choices[i]);\n        html +=\n          '<div class=\"jspsych-audio-button-response-button\" style=\"cursor: pointer; display: inline-block; margin:' +\n          trial.margin_vertical +\n          \" \" +\n          trial.margin_horizontal +\n          '\" id=\"jspsych-audio-button-response-button-' +\n          i +\n          '\" data-choice=\"' +\n          i +\n          '\">' +\n          str +\n          \"</div>\";\n      }\n      html += \"</div>\";\n\n      //show prompt if there is one\n      if (trial.prompt !== null) {\n        html += trial.prompt;\n      }\n\n      display_element.innerHTML = html;\n\n      if (trial.response_allowed_while_playing) {\n        enable_buttons();\n      } else {\n        disable_buttons();\n      }\n\n      // start time\n      startTime = performance.now();\n\n      // start audio\n      if (context !== null) {\n        startTime = context.currentTime;\n        this.audio.start(startTime);\n      } else {\n        this.audio.play();\n      }\n\n      // end trial if time limit is set\n      if (trial.trial_duration !== null) {\n        this.jsPsych.pluginAPI.setTimeout(() => {\n          end_trial();\n        }, trial.trial_duration);\n      }\n\n      on_load();\n    };\n\n    // function to handle responses by the subject\n    function after_response(choice) {\n      // measure rt\n      var endTime = performance.now();\n      var rt = Math.round(endTime - startTime);\n      if (context !== null) {\n        endTime = context.currentTime;\n        rt = Math.round((endTime - startTime) * 1000);\n      }\n      response.button = parseInt(choice);\n      response.rt = rt;\n\n      // disable all the buttons after a response\n      disable_buttons();\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    }\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill any remaining setTimeout handlers\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n\n      // stop the audio file if it is playing\n      // remove end event listeners if they exist\n      if (context !== null) {\n        this.audio.stop();\n      } else {\n        this.audio.pause();\n      }\n\n      this.audio.removeEventListener(\"ended\", end_trial);\n      this.audio.removeEventListener(\"ended\", enable_buttons);\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        response: response.button,\n      };\n\n      // clear the display\n      display_element.innerHTML = \"\";\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n\n      trial_complete();\n    };\n\n    function button_response(e) {\n      var choice = e.currentTarget.getAttribute(\"data-choice\"); // don't use dataset for jsdom compatibility\n      after_response(choice);\n    }\n\n    function disable_buttons() {\n      var btns = document.querySelectorAll(\".jspsych-audio-button-response-button\");\n      for (var i = 0; i < btns.length; i++) {\n        var btn_el = btns[i].querySelector(\"button\");\n        if (btn_el) {\n          btn_el.disabled = true;\n        }\n        btns[i].removeEventListener(\"click\", button_response);\n      }\n    }\n\n    function enable_buttons() {\n      var btns = document.querySelectorAll(\".jspsych-audio-button-response-button\");\n      for (var i = 0; i < btns.length; i++) {\n        var btn_el = btns[i].querySelector(\"button\");\n        if (btn_el) {\n          btn_el.disabled = false;\n        }\n        btns[i].addEventListener(\"click\", button_response);\n      }\n    }\n\n    return new Promise((resolve) => {\n      trial_complete = resolve;\n    });\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      response: this.jsPsych.randomization.randomInt(0, trial.choices.length - 1),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    const respond = () => {\n      if (data.rt !== null) {\n        this.jsPsych.pluginAPI.clickTarget(\n          display_element.querySelector(`div[data-choice=\"${data.response}\"] button`),\n          data.rt\n        );\n      }\n    };\n\n    this.trial(display_element, trial, () => {\n      load_callback();\n      if (!trial.response_allowed_while_playing) {\n        this.audio.addEventListener(\"ended\", respond);\n      } else {\n        respond();\n      }\n    });\n  }\n}\n\nexport default AudioButtonResponsePlugin;\n"],"names":["info","name","parameters","stimulus","type","ParameterType","AUDIO","pretty_name","default","undefined","choices","STRING","array","button_html","HTML_STRING","prompt","trial_duration","INT","margin_vertical","margin_horizontal","response_ends_trial","BOOL","trial_ends_after_audio","response_allowed_while_playing","AudioButtonResponsePlugin","constructor","jsPsych","this","trial","display_element","on_load","trial_complete","startTime","context","pluginAPI","audioContext","response","rt","button","getAudioBuffer","then","buffer","audio","createBufferSource","connect","destination","currentTime","setupTrial","catch","err","console","error","addEventListener","end_trial","enable_buttons","buttons","Array","isArray","length","i","push","html","str","replace","innerHTML","disable_buttons","performance","now","start","play","setTimeout","clearAllTimeouts","stop","pause","removeEventListener","trial_data","finishTrial","button_response","e","choice","endTime","Math","round","parseInt","after_response","currentTarget","getAttribute","btns","document","querySelectorAll","btn_el","querySelector","disabled","Promise","resolve","simulate","simulation_mode","simulation_options","load_callback","simulate_data_only","simulate_visual","create_simulation_data","default_data","randomization","sampleExGaussian","randomInt","data","mergeSimulationData","ensureSimulationDataConsistency","getDisplayElement","respond","clickTarget"],"mappings":"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"}