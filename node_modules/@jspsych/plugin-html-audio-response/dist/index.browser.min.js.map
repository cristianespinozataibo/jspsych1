{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"html-audio-response\",\n  parameters: {\n    /** The HTML string to be displayed */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n      default: undefined,\n    },\n    /** How long to show the stimulus. */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** How long to show the trial. */\n    recording_duration: {\n      type: ParameterType.INT,\n      default: 2000,\n    },\n    show_done_button: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    done_button_label: {\n      type: ParameterType.STRING,\n      default: \"Continue\",\n    },\n    record_again_button_label: {\n      type: ParameterType.STRING,\n      default: \"Record again\",\n    },\n    accept_button_label: {\n      type: ParameterType.STRING,\n      default: \"Continue\",\n    },\n    allow_playback: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    save_audio_url: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * html-audio-response\n * jsPsych plugin for displaying a stimulus and recording an audio response through a microphone\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/plugins/jspsych-html-audio-response/ html-audio-response plugin documentation on jspsych.org}\n */\nclass HtmlAudioResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n  private stimulus_start_time;\n  private recorder_start_time;\n  private recorder: MediaRecorder;\n  private audio_url;\n  private response;\n  private load_resolver;\n  private rt: number = null;\n  private start_event_handler;\n  private stop_event_handler;\n  private data_available_handler;\n  private recorded_data_chunks = [];\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    this.recorder = this.jsPsych.pluginAPI.getMicrophoneRecorder();\n\n    this.setupRecordingEvents(display_element, trial);\n\n    this.startRecording();\n  }\n\n  private showDisplay(display_element, trial) {\n    const ro = new ResizeObserver((entries, observer) => {\n      this.stimulus_start_time = performance.now();\n      observer.unobserve(display_element);\n      //observer.disconnect();\n    });\n\n    ro.observe(display_element);\n\n    let html = `<div id=\"jspsych-html-audio-response-stimulus\">${trial.stimulus}</div>`;\n\n    if (trial.show_done_button) {\n      html += `<p><button class=\"jspsych-btn\" id=\"finish-trial\">${trial.done_button_label}</button></p>`;\n    }\n\n    display_element.innerHTML = html;\n  }\n\n  private hideStimulus(display_element: HTMLElement) {\n    const el: HTMLElement = display_element.querySelector(\"#jspsych-html-audio-response-stimulus\");\n    if (el) {\n      el.style.visibility = \"hidden\";\n    }\n  }\n\n  private addButtonEvent(display_element, trial) {\n    const btn = display_element.querySelector(\"#finish-trial\");\n    if (btn) {\n      btn.addEventListener(\"click\", () => {\n        const end_time = performance.now();\n        this.rt = Math.round(end_time - this.stimulus_start_time);\n        this.stopRecording().then(() => {\n          if (trial.allow_playback) {\n            this.showPlaybackControls(display_element, trial);\n          } else {\n            this.endTrial(display_element, trial);\n          }\n        });\n      });\n    }\n  }\n\n  private setupRecordingEvents(display_element, trial) {\n    this.data_available_handler = (e) => {\n      if (e.data.size > 0) {\n        this.recorded_data_chunks.push(e.data);\n      }\n    };\n\n    this.stop_event_handler = () => {\n      const data = new Blob(this.recorded_data_chunks, { type: \"audio/webm\" });\n      this.audio_url = URL.createObjectURL(data);\n      const reader = new FileReader();\n      reader.addEventListener(\"load\", () => {\n        const base64 = (reader.result as string).split(\",\")[1];\n        this.response = base64;\n        this.load_resolver();\n      });\n      reader.readAsDataURL(data);\n    };\n\n    this.start_event_handler = (e) => {\n      // resets the recorded data\n      this.recorded_data_chunks.length = 0;\n\n      this.recorder_start_time = e.timeStamp;\n      this.showDisplay(display_element, trial);\n      this.addButtonEvent(display_element, trial);\n\n      // setup timer for hiding the stimulus\n      if (trial.stimulus_duration !== null) {\n        this.jsPsych.pluginAPI.setTimeout(() => {\n          this.hideStimulus(display_element);\n        }, trial.stimulus_duration);\n      }\n\n      // setup timer for ending the trial\n      if (trial.recording_duration !== null) {\n        this.jsPsych.pluginAPI.setTimeout(() => {\n          // this check is necessary for cases where the\n          // done_button is clicked before the timer expires\n          if (this.recorder.state !== \"inactive\") {\n            this.stopRecording().then(() => {\n              if (trial.allow_playback) {\n                this.showPlaybackControls(display_element, trial);\n              } else {\n                this.endTrial(display_element, trial);\n              }\n            });\n          }\n        }, trial.recording_duration);\n      }\n    };\n\n    this.recorder.addEventListener(\"dataavailable\", this.data_available_handler);\n\n    this.recorder.addEventListener(\"stop\", this.stop_event_handler);\n\n    this.recorder.addEventListener(\"start\", this.start_event_handler);\n  }\n\n  private startRecording() {\n    this.recorder.start();\n  }\n\n  private stopRecording() {\n    this.recorder.stop();\n    return new Promise((resolve) => {\n      this.load_resolver = resolve;\n    });\n  }\n\n  private showPlaybackControls(display_element, trial) {\n    display_element.innerHTML = `\n      <p><audio id=\"playback\" src=\"${this.audio_url}\" controls></audio></p>\n      <button id=\"record-again\" class=\"jspsych-btn\">${trial.record_again_button_label}</button>\n      <button id=\"continue\" class=\"jspsych-btn\">${trial.accept_button_label}</button>\n    `;\n\n    display_element.querySelector(\"#record-again\").addEventListener(\"click\", () => {\n      // release object url to save memory\n      URL.revokeObjectURL(this.audio_url);\n      this.startRecording();\n    });\n    display_element.querySelector(\"#continue\").addEventListener(\"click\", () => {\n      this.endTrial(display_element, trial);\n    });\n\n    // const audio = display_element.querySelector('#playback');\n    // audio.src =\n  }\n\n  private endTrial(display_element, trial) {\n    // clear recordering event handler\n\n    this.recorder.removeEventListener(\"dataavailable\", this.data_available_handler);\n    this.recorder.removeEventListener(\"start\", this.start_event_handler);\n    this.recorder.removeEventListener(\"stop\", this.stop_event_handler);\n\n    // kill any remaining setTimeout handlers\n    this.jsPsych.pluginAPI.clearAllTimeouts();\n\n    // gather the data to store for the trial\n    var trial_data: any = {\n      rt: this.rt,\n      stimulus: trial.stimulus,\n      response: this.response,\n      estimated_stimulus_onset: Math.round(this.stimulus_start_time - this.recorder_start_time),\n    };\n\n    if (trial.save_audio_url) {\n      trial_data.audio_url = this.audio_url;\n    } else {\n      URL.revokeObjectURL(this.audio_url);\n    }\n\n    // clear the display\n    display_element.innerHTML = \"\";\n\n    // move on to the next trial\n    this.jsPsych.finishTrial(trial_data);\n  }\n}\n\nexport default HtmlAudioResponsePlugin;\n"],"names":["info","name","parameters","stimulus","type","ParameterType","HTML_STRING","default","undefined","stimulus_duration","INT","recording_duration","show_done_button","BOOL","done_button_label","STRING","record_again_button_label","accept_button_label","allow_playback","save_audio_url","HtmlAudioResponsePlugin","constructor","jsPsych","this","trial","display_element","recorder","pluginAPI","getMicrophoneRecorder","setupRecordingEvents","startRecording","showDisplay","ResizeObserver","entries","observer","stimulus_start_time","performance","now","unobserve","observe","html","innerHTML","hideStimulus","el","querySelector","style","visibility","addButtonEvent","btn","addEventListener","end_time","rt","Math","round","stopRecording","then","showPlaybackControls","endTrial","data_available_handler","e","data","size","recorded_data_chunks","push","stop_event_handler","Blob","audio_url","URL","createObjectURL","reader","FileReader","base64","result","split","response","load_resolver","readAsDataURL","start_event_handler","length","recorder_start_time","timeStamp","setTimeout","state","start","stop","Promise","resolve","revokeObjectURL","removeEventListener","clearAllTimeouts","trial_data","estimated_stimulus_onset","finishTrial"],"mappings":"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"}